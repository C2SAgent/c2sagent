version: '3.8'

networks:
  app_net:
    driver: bridge

services:
  mongodb:
    image: mongo:latest
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: your_secure_password
      MONGO_INITDB_DATABASE: chatdb
    volumes:
      - mongodb_data:/data/mongodb_data
      - ./mongo-init/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "27017:27017"
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app_net

  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    volumes:
      - redis_data:/data/redis_data
    ports:
      - "6379:6379"
    networks:
      - app_net

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgre
      POSTGRES_DB: manager_agent
    volumes:
      - postgres_data:/data/postgres_data
      - ./postgresql-init/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_net

  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    ports:
      - "8000:8000"
      - "3000:3000"
      - "10001:10001"
    volumes:
      - ../.:/app
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql+asyncpg://postgres:postgre@postgres:5432/manager_agent
      - DATABASE_SYNC_URL=postgresql://postgres:postgre@localhost/manager_agent
      - MONGO_URI=mongodb://root:your_secure_password@mongodb:27017/
      - SECRET_KEY=your-secret-key-here
      - BIND=0.0.0.0
    depends_on:
      mongodb:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_net
    restart: unless-stopped

volumes:
  mongodb_data:
  redis_data:
  postgres_data:
  backend:
